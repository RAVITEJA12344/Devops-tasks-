1) Create VPC
2) Create Internet gateway
3) Create Custom Route Table
4) Create Subnet
5) Associate subnet with Route Table
6) Create Security Group to allow port 22.80,443
7) Create a network interface with an ip in the subnet that was created in step 4
8) Assign an elastic IP to the network interface created in step 7
9) Create Ubuntu server and install/enable apache2
Note:
1) Create single main.tf which will be created the above resources and do not hardcode the id's.
2) Configure s3 as backend and dynamo db locking for multi user execution.


provider "aws" {
  region = "us-east-1"
}

#VPC CreationS
resource "aws_vpc" "main_vpc" {
  cidr_block           = "10.0.0.0/16"
  enable_dns_support   = true
  enable_dns_hostnames = true
  tags = {
    Name = "MainVPC"
  }
}
#internet gateway creation
resource "aws_internet_gateway" "my_IGW" {
  vpc_id = aws_vpc.main_vpc.id
  tags = {
    Name = "MyIGW"
  }
}
#Custom Route Table Creation
resource "aws_route_table" "My_RT" {
  vpc_id = aws_vpc.main_vpc.id
  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.my_IGW.id
  }
  tags = {
    Name = "pri-RT"
  }
}
# Create Subnet
resource "aws_subnet" "Pub-Subnet" {
  vpc_id                  = aws_vpc.main_vpc.id
  cidr_block              = "10.0.0.0/24"
  availability_zone       = "us-east-1a"
  map_public_ip_on_launch = true

  tags = {
    Name = "Pub_sub"
  }
}


# Associate subnet with Route 
resource "aws_route_table_association" "my_RTA" {
  subnet_id      = aws_subnet.Pub-Subnet.id
  route_table_id = aws_route_table.My_RT.id
}
#creating Security Groups for SSh,HTTP and HTTPS
resource "aws_security_group" "my_SG" {
  name        = "My_SG"
  description = "Allow SSH, HTTP, HTTPS"
  vpc_id      = aws_vpc.main_vpc.id

  ingress {
    description = "SSH"
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    description = "HTTP"
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    description = "HTTPS"
    from_port   = 443
    to_port     = 443
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    description = "All outbound"
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags = {
    Name = "My_SecurityGroup"
  }
}

#Creating network interface
resource "aws_network_interface" "my_NI" {
  subnet_id       = aws_subnet.Pub-Subnet.id
  private_ip      = "10.0.0.98"
  security_groups = [aws_security_group.my_SG.id]

  tags = {
    Name = "My_NI"
  }
}
resource "aws_eip" "My_EIP" {
  domain            = "vpc"
  network_interface = aws_network_interface.my_NI.id
  depends_on        = [aws_internet_gateway.my_IGW]

  tags = {
    Name = "Elastic_IP"
  }
}

# Create Ubuntu EC2 and install Apache
resource "aws_instance" "Ubuntu_server" {
  ami           = "ami-020cba7c55df1f615"
  instance_type = "t2.micro"
  network_interface {
    network_interface_id = aws_network_interface.my_NI.id
    device_index         = 0
  }
  user_data = <<-EOF
              #!/bin/bash
              apt-get update -y
              apt-get install apache2 -y
              systemctl enable apache2
              systemctl start apache2
              EOF

  tags = {
    Name = "MY_ubuntuApacheServer"
  }
}

resource "aws_s3_bucket" "ravis3tasks-1144" {
  bucket = "ravis3task-1144"
  acl    = "private"

}

resource "aws_dynamodb_table" "Dynamo_table" {
  name           = "terraform-state-lock-dynamodb"
  hash_key       = "LockID"
  read_capacity  = 20
  write_capacity = 20

  attribute {
    name = "LockID"
    type = "S"
  }
}

terraform {
  backend "s3" {
    bucket         = "ravis3task-1144"
    dynamodb_table = "terraform-state-lock-dynamodb"
    key            = "terraform.tfstate"
    region         = "us-east-1"
  }
}
